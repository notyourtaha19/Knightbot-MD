const fs = require('fs');
const path = require('path');

async function helpCommand(sock, chatId) {
    const helpMessage = `> ‚âª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÜ‚ú©‚ãÜ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚â∫
  ùó†ùóîùóõùóúùó•ùó® ùóïùó¢ùóß v2.0.0
üëë ùóïùó¢ùóß ùó¢ùó™ùó°ùóòùó•: T A H A
> ‚âª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÜ‚ú©‚ãÜ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚â∫

‚ú® ùó™ùó≤ùóπùó∞ùóºùó∫ùó≤ ùòÅùóº ùó†ùóÆùóµùó∂ùóøùòÇ ùóïùóºùòÅ ‚Äî ùòÜùóºùòÇùóø ùóÆùóªùó∂ùó∫ùó≤-ùòÅùóµùó≤ùó∫ùó≤ùó± ùó™ùóµùóÆùòÅùòÄùóîùóΩùóΩ ùóÆùòÄùòÄùó∂ùòÄùòÅùóÆùóªùòÅ!

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóöùóòùó°ùóòùó•ùóîùóü ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .help  .ping  .alive  .tts  .owner  .joke  .quote  .fact  .weather  .news  .attp  .lyrics  .8ball  .groupinfo  .staff  .vv  .pair  .trt  .ss <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóîùóóùó†ùóúùó° ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .ban  .unban  .promote  .demote  .kick  .mute  .unmute  .warn  .warnings  .tag  .tagall  .chatbot  .delete  .del  .antilink  .antibadword  .resetlink  .clear <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùó¢ùó™ùó°ùóòùó• ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .mode  .autostatus  .clearsession  .antidelete  .cleartmp  .setpp  .autoreact <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùó¶ùóßùóúùóñùóûùóòùó• & ùóúùó†ùóîùóöùóò „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .sticker  .simage  .blur  .meme  .emojimix  .take  .tgsticker <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóôùó®ùó° ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .flirt  .compliment  .insult  .character  .wasted  .simp  .stupid  .ship  .truth  .dare <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóöùóîùó†ùóòùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .tictactoe  .hangman  .guess  .trivia  .answer <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóîùóú ùóñùó¢ùó†ùó†ùóîùó°ùóóùó¶ „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .gpt  .gemini <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóßùóòùó´ùóßùó†ùóîùóûùóòùó• „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .metallic  .ice  .snow  .impressive  .matrix  .light  .neon  .devil  .purple  .thunder  .leaves  .1917  .arena  .hacker  .sand  .blackpink  .glitch  .fire <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóóùó¢ùó™ùó°ùóüùó¢ùóîùóóùóòùó• „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .play  .song  .instagram  .facebook  .tiktok <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùóöùóúùóßùóõùó®ùóï & ùó¶ùóñùó•ùóúùó£ùóß „Äè‚îÄ‚îÄ‚îÄ‚â∫  
> .git  .github  .sc  .script  .repo <

‚âª‚îÄ‚îÄ‚îÄ„Äé ùó¶ùó®ùó£ùó£ùó¢ùó•ùóß & ùóñùó¢ùó°ùóßùóîùóñùóß „Äè‚îÄ‚îÄ‚îÄ‚â∫  
üí¨ *Need help or suggestions?*  
Contact the bot owner directly for assistance:  
üëë *BOT OWNER: ìÜ©·¥õ ·¥Ä  ú ·¥ÄìÜ™*

‚ú® Thank you for using *Mahiru Bot*!  
‚ö° Stay awesome, stay automated! ‚ö°`;

    try {
        const videoPath = path.join(__dirname, '../assets/Mahiru_help.mp4');

        if (fs.existsSync(videoPath)) {
            const videoBuffer = fs.readFileSync(videoPath);
            await sock.sendMessage(chatId, {
                video: videoBuffer,
                caption: helpMessage,
                gifPlayback: true,
                contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true
                }
            });
        } else {
            await sock.sendMessage(chatId, {
                text: helpMessage
            });
        }
    } catch (error) {
        console.error('Error in help command:', error);
        await sock.sendMessage(chatId, { text: helpMessage });
    }
}

module.exports = helpCommand;const { igdl } = require("ruhend-scraper");

// Store processed message IDs to prevent duplicates
const processedMessages = new Set();

// Emoji pool for random reaction
const emojiPool = ['üîÑ', 'üé¨', 'üì•', '‚¨áÔ∏è', 'üì≤', '‚ö°', 'üíª', 'üìΩÔ∏è', 'üíæ', 'üñ•Ô∏è', 'üé•', 'üí°', 'üåü', 'üöÄ', 'üì°'];

async function instagramCommand(sock, chatId, message) {
    try {
        if (processedMessages.has(message.key.id)) return;
        processedMessages.add(message.key.id);
        setTimeout(() => processedMessages.delete(message.key.id), 5 * 60 * 1000);

        const text = message.message?.conversation || message.message?.extendedTextMessage?.text;
        if (!text) {
            return await sock.sendMessage(chatId, { 
                text: "Please provide an Instagram link for the video." 
            }, { quoted: message });
        }

        // Instagram link validation
        const instagramPatterns = [
            /https?:\/\/(?:www\.)?instagram\.com\//,
            /https?:\/\/(?:www\.)?instagr\.am\//,
            /https?:\/\/(?:www\.)?instagram\.com\/p\//,
            /https?:\/\/(?:www\.)?instagram\.com\/reel\//,
            /https?:\/\/(?:www\.)?instagram\.com\/tv\//
        ];
        const isValidUrl = instagramPatterns.some(pattern => pattern.test(text));
        if (!isValidUrl) {
            return await sock.sendMessage(chatId, {
                text: "That is not a valid Instagram link. Please provide a valid post, reel, or video link."
            }, { quoted: message });
        }

        // React with a random emoji
        const randomEmoji = emojiPool[Math.floor(Math.random() * emojiPool.length)];
        await sock.sendMessage(chatId, {
            react: { text: randomEmoji, key: message.key }
        });

        // Step 1: Analyzing...
        await sock.sendMessage(chatId, {
            text: "üîç *Analyzing the video link...*",
        }, { quoted: message });

        // Step 2: Downloading...
        await sock.sendMessage(chatId, {
            text: "üì• *Downloading video...*",
        }, { quoted: message });

        const downloadData = await igdl(text);
        if (!downloadData?.data?.length) {
            return await sock.sendMessage(chatId, {
                text: "No media found at the provided link."
            }, { quoted: message });
        }

        // Step 3: Sending...
        await sock.sendMessage(chatId, {
            text: "üì¶ *Sending video or file...*",
        }, { quoted: message });

        for (let i = 0; i < Math.min(20, downloadData.data.length); i++) {
            const media = downloadData.data[i];
            const mediaUrl = media.url;

            // Try to get a caption
            let caption = media.caption || media.title || media.desc || media.description || "";

            // Append custom footer
            const finalCaption = `${caption ? caption + "\n\n" : ""}‚¨áÔ∏è *ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêÑùêÉ ùêÅùêò ùó†ùóîùóõùóúùó•ùó® ùóïùó¢ùóß*\nüëë *ùó¢ùó™ùó°ùóòùó•: ùóß ùóî ùóõ ùóî*`;

            const isVideo = /\.(mp4|mov|avi|mkv|webm)$/i.test(mediaUrl) ||
                            media.type === 'video' ||
                            text.includes('/reel/') ||
                            text.includes('/tv/');

            if (isVideo) {
                await sock.sendMessage(chatId, {
                    video: { url: mediaUrl },
                    mimetype: "video/mp4",
                    caption: finalCaption
                }, { quoted: message });
            } else {
                await sock.sendMessage(chatId, {
                    image: { url: mediaUrl },
                    caption: finalCaption
                }, { quoted: message });
            }

            // Optional: log media for debug
            // console.log(JSON.stringify(media, null, 2));
        }

    } catch (error) {
        console.error('Error in Instagram command:', error);
        await sock.sendMessage(chatId, {
            text: "An error occurred while processing the request."
        }, { quoted: message });
    }
}

module.exports = instagramCommand;
